AWSTemplateFormatVersion: '2010-09-09'

Description: ECS Cluster Application Release

Parameters:
  Name:
    Type: String
    Description: Name of this Application
    ConstraintDescription: Must be DNS friendly
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9\-]+$
  ClusterName:
    Type: String
    Description: Name of the ECS cluster to use
    ConstraintDescription: Must be DNS friendly
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9\-]+$
  ContainerPort:
    Description: Port container listens
    Type: String
  HealthCheckPath:
    Description: Healthcheck Path used on TargetGroup
    Type: String
    Default: /
  HealthCheckGracePeriod:
    Description: The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started.
    Type: Number
    Default: 60
  HealthCheckTimeout:
    Description: The amount of time, in seconds, during which no response means a failed health check (2-120 seconds).
    Type: Number
    Default: 5
  HealthCheckInterval:
    Description: The approximate amount of time between health checks of an individual target (5-300 seconds).
    Type: Number
    Default: 10
  DeregistrationDelay:
    Description: Target Group Deregistration Delay timeout in seconds
    Type: Number
    Default: 30
  Autoscaling:
    Description: Enable Autoscaling
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  AutoscalingTargetValue:
    Description: Target CPU for Autoscaling
    Type: Number
    Default: 75
  AutoscalingMaxSize:
    Description: Max number of containers to autoscale
    Type: Number
    Default: 16
  AutoscalingMinSize:
    Description: Min number of containers to autoscale
    Type: Number
    Default: 2
  HostedZoneName:
    Type: String
    Description: Hosted Zone name for domain record created for this app
  Hostname:
    Type: String
  HostnameBlue:
    Type: String
  HostnameCreate:
    Type: String
    Default: "true"
  PathPattern:
    Type: String
    Default: "/*"
  Image:
    Description: Image for initial task definition placeholder
    Type: String
    Default: dnxsolutions/nginx-hello:latest

Conditions:
  isHostnameCreate: !Equals [ !Ref HostnameCreate, 'true' ]
  isAutoscaling: !Equals [ !Ref Autoscaling, 'true' ]

Resources:
  AlbTargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ClusterName}-${Name}-G"
      HealthCheckIntervalSeconds: !Ref HealthCheckInterval
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: !Ref HealthCheckTimeout
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: !Ref DeregistrationDelay
      VpcId:
        Fn::ImportValue: !Sub "TfExport-Ecs-${ClusterName}-VpcId"

  AlbTargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ClusterName}-${Name}-B"
      HealthCheckIntervalSeconds: !Ref HealthCheckInterval
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: !Ref HealthCheckTimeout
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: !Ref DeregistrationDelay
      VpcId:
        Fn::ImportValue: !Sub "TfExport-Ecs-${ClusterName}-VpcId"

  ListenerRuleGreen:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: AlbTargetGroupGreen
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref Hostname
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - !Ref PathPattern
      ListenerArn:
        Fn::ImportValue: !Sub "TfExport-Ecs-${ClusterName}-AlbListenerHttpsArn"
      Priority: !GetAtt AlbListernerPriority.Value

  ListenerRuleBlue:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: AlbTargetGroupGreen
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref HostnameBlue
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - !Ref PathPattern
      ListenerArn:
        Fn::ImportValue: !Sub "TfExport-Ecs-${ClusterName}-AlbListenerHttpsArn"
      Priority: !GetAtt AlbListernerPriority.NextValue

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Ref Name
          Image: !Ref Image
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Memory: "128"
          Essential: true

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: ListenerRuleGreen
    Properties:
      ServiceName: !Sub "${Name}"
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      PlacementStrategies:
        - Type: spread
          Field: attribute:ecs.availability-zone
        - Type: binpack
          Field: memory
      DeploymentController:
        Type: CODE_DEPLOY
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriod
      Cluster:
        Fn::ImportValue: !Sub "TfExport-Ecs-${ClusterName}-EcsName"
      Role:
        Fn::ImportValue: !Sub "TfExport-Ecs-${ClusterName}-EcsServiceIamRoleArn"
      LoadBalancers:
        - ContainerName: !Sub "${Name}"
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref AlbTargetGroupGreen

  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: isAutoscaling
    Properties:
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      MaxCapacity: !Ref AutoscalingMaxSize
      MinCapacity: !Ref AutoscalingMinSize
      ResourceId: !Sub
        - "service/${ECSCluster}/${ServiceName}"
        - ECSCluster:
            Fn::ImportValue: !Sub "TfExport-Ecs-${ClusterName}-EcsName"
          ServiceName: !GetAtt EcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: isAutoscaling
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-target'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref 'ServiceScalingTarget'
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref AutoscalingTargetValue
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  Route53Hostname:
    Type: AWS::Route53::RecordSet
    Condition: isHostnameCreate
    Properties:
      Name: !Ref Hostname
      HostedZoneName: !Ref HostedZoneName
      Type: A
      AliasTarget:
        HostedZoneId:
          Fn::ImportValue: !Sub "TfExport-Ecs-${ClusterName}-AlbZoneId"
        DNSName:
          Fn::ImportValue: !Sub "TfExport-Ecs-${ClusterName}-AlbDnsName"

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub "${ClusterName}-${Name}"
      ComputePlatform: ECS

  CodeDeployServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

  CodeDeployDeploymentGroup:
    Type: Custom::CustomCodeDeployDeploymentGroup
    Properties:
      ServiceToken: !GetAtt 'CustomResourceFunctionCodeDeploy.Arn'
      Name: !Sub "${ClusterName}-${Name}"
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      AlbTargetGroupBlueName: !GetAtt AlbTargetGroupBlue.TargetGroupName
      AlbTargetGroupGreenName: !GetAtt AlbTargetGroupGreen.TargetGroupName
      AlbListenerArn:
        Fn::ImportValue: !Sub "TfExport-Ecs-${ClusterName}-AlbListenerHttpsArn"
      EcsServiceName: !GetAtt EcsService.Name
      EcsClusterName:
        Fn::ImportValue: !Sub "TfExport-Ecs-${ClusterName}-EcsName"

  CustomResourceFunctionCodeDeploy:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Timeout: 30
      Role: !GetAtt 'CustomResourceFunctionCodeDeployRole.Arn'
      Runtime: python3.6
      Code:
        ZipFile: |
          import base64
          import json
          import logging
          import string
          import random
          import boto3
          from botocore.vendored import requests
          import cfnresponse

          client = boto3.client('codedeploy')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
            logger.info('got event {}'.format(event))
            responseData = {}

            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
              response = client.create_deployment_group(
                  applicationName=event['ResourceProperties']['ApplicationName'],
                  deploymentGroupName=event['ResourceProperties']['Name'],
                  deploymentConfigName='CodeDeployDefault.ECSAllAtOnce',
                  serviceRoleArn=event['ResourceProperties']['ServiceRoleArn'],
                  autoRollbackConfiguration={
                      'enabled': True,
                      'events': [
                          'DEPLOYMENT_FAILURE',
                      ]
                  },
                  deploymentStyle={
                      'deploymentType': 'BLUE_GREEN',
                      'deploymentOption': 'WITH_TRAFFIC_CONTROL'
                  },
                  blueGreenDeploymentConfiguration={
                      'terminateBlueInstancesOnDeploymentSuccess': {
                          'action': 'TERMINATE',
                          'terminationWaitTimeInMinutes': 0
                      },
                      'deploymentReadyOption': {
                          'actionOnTimeout': 'CONTINUE_DEPLOYMENT',
                          'waitTimeInMinutes': 0
                      }
                  },
                  loadBalancerInfo={
                      'targetGroupPairInfoList': [
                          {
                              'targetGroups': [
                                  {
                                      'name': event['ResourceProperties']['AlbTargetGroupBlueName']
                                  },
                                  {
                                      'name': event['ResourceProperties']['AlbTargetGroupGreenName']
                                  },
                              ],
                              'prodTrafficRoute': {
                                  'listenerArns': [
                                      event['ResourceProperties']['AlbListenerArn'],
                                  ]
                              },
                          },
                      ]
                  },
                  ecsServices=[
                      {
                          'serviceName': event['ResourceProperties']['EcsServiceName'],
                          'clusterName': event['ResourceProperties']['EcsClusterName'],
                      },
                  ],
              )
              responseData['response'] = response

            else:
              response = client.delete_deployment_group(
                  applicationName=event['ResourceProperties']['ApplicationName'],
                  deploymentGroupName=event['ResourceProperties']['Name'],
              )
              response['deploymentGroupId'] = ""

            logger.info('event {}'.format(event))
            logger.info('responseData {}'.format(responseData))
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, response['deploymentGroupId'])

  CustomResourceFunctionCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - codedeploy:*
            Resource: "*"
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource: "*"

  AlbListernerPriority:
    Type: Custom::CustomCodeDeployDeploymentGroup
    Properties:
      ServiceToken: !GetAtt 'CustomResourceFunctionAlbPriority.Arn'
      AlbListenerArn:
        Fn::ImportValue: !Sub "TfExport-Ecs-${ClusterName}-AlbListenerHttpsArn"

  CustomResourceFunctionAlbPriority:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Timeout: 30
      Role: !GetAtt 'CustomResourceFunctionAlbPriorityRole.Arn'
      Runtime: python3.6
      Code:
        ZipFile: |
          import logging
          import boto3
          from botocore.vendored import requests
          import cfnresponse

          client = boto3.client('elbv2')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
            logger.info('got event {}'.format(event))
            responseData = {}

            highestPriority = 1

            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':

              extraArgs = {
                'ListenerArn': event['ResourceProperties']['AlbListenerArn']
              }

              while True:
                response = client.describe_rules(**extraArgs)
                for rule in response['Rules']:
                  if rule['Priority'] == 'default':
                    continue
                  if int(rule['Priority']) > highestPriority:
                    highestPriority = int(rule['Priority'])

                if not 'NextMarker' in response:
                    break
                extraArgs['Marker'] = response['NextMarker']

              responseData = {
                'Value': str(highestPriority+1),
                'NextValue': str(highestPriority+2)
              }

            else:
              pass

            logger.info('event {}'.format(event))
            logger.info('responseData {}'.format(responseData))
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, str(highestPriority+1))

  CustomResourceFunctionAlbPriorityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - elasticloadbalancing:DescribeRules
            Resource: "*"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub "/ecs/${ClusterName}/${Name}"
